<?php

/**
 * @file
 *     cron_downloader functions
 */

/**
 * Implements hook_cron()
 */
function cron_downloader_cron() {
  // Getthe files
  $private_files = variable_get('cron_downloader_files_private', array('http://www.independent.co.uk/facebook-instant.rss'));
  $public_files = variable_get('cron_downloader_files_public', array('http://www.standard.co.uk/facebook-instant.rss'));

  // Download them
  cron_downloader_file_grabber($private_files, 'private');
  cron_downloader_file_grabber($public_files);
}

/**
 * Saves a remote file to the DB and file system
 *
 * param string $url
 *    Full url to file to download
 * param string $uri
 *    Drupal uri of where to save file public://archive/test.pdf
 * param int $save_mode
 *    File save mode from drupal core, eg FILE_EXISTS_REPLACE
 */
function cron_downloader_download_external_file($url, $uri, $save_mode = FILE_EXISTS_RENAME, $manage_file = TRUE) {

  $url_info = parse_url($url);
  $url_path_info = pathinfo($url_info['path']);

  // This helps with filenames with spaces
  $url = $url_info['scheme'] . '://' . $url_info['host'] . $url_path_info['dirname'] . '/' . rawurlencode($url_path_info['basename']);

  // Need to remove the filename from the uri
  $uri_target = file_uri_target($uri);
  $uri_scheme = file_uri_scheme($uri);
  $uri_path_info = pathinfo($uri_target);
  $directory = file_stream_wrapper_uri_normalize($uri_scheme . "://" . $uri_path_info['dirname']);

  if (file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
    $drupal_result = drupal_http_request($url);
    if (!empty($drupal_result->data)) {
      $path = file_stream_wrapper_uri_normalize($uri);
      if ($manage_file) {
        $new_file = file_save_data($drupal_result->data, $path, $save_mode);
      } else {
        return file_unmanaged_save_data($drupal_result->data, $path, $save_mode);
      }
    } else {
      watchdog("cron_downloader", "Error downloading file, no data recieved for " . $url);
      return FALSE;
    }

    $new_file->display = 1;
    return (array) $new_file;
  } else {
    watchdog("cron_downloader", "Could not create directory");
  }
}

/**
 * Helper function to call the downloader function
 * 
 * @param array $files
 *    an array of URLs to scrape
 * @param string $destination
 *    public private or temporary
 */
function cron_downloader_file_grabber($files = array(), $destination = 'public') {
  foreach ($files as $file) {
    $basename = cron_downloader_file_namer($file);
    $uri = "$destination://cron_downloader/$basename";
    watchdog("cron_downloader", "Downloading: $url to $uri");
    cron_downloader_download_external_file($file, $uri, FILE_EXISTS_REPLACE, TRUE);
  }
}

/**
 * Creates a safe filename form the supplies string
 * 
 * @param string $str
 * 
 * @return string
 */
function cron_downloader_file_namer($str = '') {
  $str = strip_tags($str);
  $str = preg_replace('/[\r\n\t ]+/', ' ', $str);
  $str = preg_replace('/[\"\*\/\:\<\>\?\'\|]+/', ' ', $str);
  $str = strtolower($str);
  $str = html_entity_decode($str, ENT_QUOTES, "utf-8");
  $str = htmlentities($str, ENT_QUOTES, "utf-8");
  $str = preg_replace("/(&)([a-z])([a-z]+;)/i", '$2', $str);
  $str = str_replace(' ', '-', $str);
  $str = rawurlencode($str);
  $str = str_replace('%', '-', $str);

  return $str;
}
